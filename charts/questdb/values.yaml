image:
  repository: questdb/questdb
  pullPolicy: IfNotPresent
  tag: 7.3.3

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podSecurityContext: {}
securityContext: {}
extraVolumes: []
extraVolumeMounts: []
extraLabels: {}

questdb:
  dataDir: /var/lib/questdb
  serverConfig:
    enabled: true
    options:
      shared.worker.count: 2
  loggingConfig:
    enabled: false
    options: {}
  # env supports key/value pairs that are added directly to the questdb statefulset's env
  env: {}
  # envFrom supports a list of sources that will be injected into the questdb statefulset's env
  envFrom: []

service:
  annotations: {}
  type: ClusterIP
  port: 9000
  expose:
    postgresql:
      enabled: false
      port: 8812
    influxdb:
      enabled: false
      port: 9009

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 50Gi
  annotations: {}
  # Uncomment storageClass if you want to use a specific Storage Class
  # storageClass: STORAGE_CLASS_NAME_HERE
  # Uncomment existingClaim to enable existing pvc to be mounted for db storage
  # size and accessMode will be ignored
  # existing pvc needs to be in the namespace where questdb will be deployed
  # if you have problems with aws availability zones use nodeSelector to schedule nodes in the same az as volume
  # existingClaim: PVC_NAME_HERE

ingress:
  enabled: false
  annotations: {}
  # tls:
  #   - hosts:
  #       - example.com
  #     secretName: questdb-certificate
  # ingressClassName: nginx
  # hosts:
  #   - host: example.com
  #     paths:
  #       - /

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}

metrics:
  enabled: true
  port: 9003

sidecars: []

serviceAccount:
  create: false
  labels: {}
  annotations: {}

  # if create is set to "true", you can specify the name of that service account below
  # if create is set to "false", you can use this to reference an existing service account for the StatefulSet pod
  # name: custom-service-account-name
